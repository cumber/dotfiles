" Pretty stuff
set guifont=Inconsolata\ for\ Powerline\ 15
set background=light
colorscheme automation

" Rainbow parentheses does nothing if this variable isn't set, so had
" to delay that plugin from loading
let g:rainbow_conf = {
\ 'ctermfgs': ['red', 'yellow', 'green', 'cyan', 'blue', 'magenta'],
\ 'separately': {
\   'haskell': {
\     'parentheses': [
\       'start=/(/ end=/)/',
\       'start=/\[/ end=/\]/',
\       'start=/{-\@!/ end=/-\@<!}/',
\     ]
\   }
\ }
\}
let g:rainbow_active = 1
call vam#Scripts([], {'tag_regex': 'delay'})

" Make it easy to move over lines
set whichwrap=b,s,<,>,[,]
set backspace=indent,eol,start

" Tab behaviour
set autoindent
set tabstop=4
set shiftwidth=4
set expandtab

" Visible tabs and trailing whitespace
set listchars=tab:»\ ,trail:·
set list

" Highlight searches, and clear highlight
set hlsearch
set incsearch
map <Leader>/ :nohlsearch<CR>

" Show line numbers
map <Leader>0 :set number!<CR>
set colorcolumn=81
set numberwidth=6
set number

" Add an 'open' command
map <silent> <Leader>o :Explore<CR>

" Override buffer settings for netrw so we have line numbers
let g:netrw_bufsettings = 'noma nomod number nobl nowrap ro'

" Statusline
set laststatus=2
let g:airline_powerline_fonts = 1

set pastetoggle=<F11>

let g:haddock_browser = "chromium-browser"

" syntastic
map <silent> <Leader>e :Errors<CR>
map <silent> <leader>E :lcl<CR>
map <Leader>s :SyntasticToggleMode<CR>

" tagbar
map <silent> <Leader>= :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

" avoid double-indent in python files
let g:pyindent_open_paren = '&sw'
let g:pyindent_continue = '&sw'

" Get type or info of thing under cursor
au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
au FileType haskell nnoremap <buffer> <F2> :HdevtoolsClear<CR>
au FileType haskell nnoremap <buffer> <F3> :HdevtoolsInfo<CR>

" Insert type signature for binding under cursor in Haskell
au FileType haskell nnoremap <buffer> <Leader>t :HdevtoolsSig<CR>

" hdevtools should treat typed holes and type errors as warnings so that it
" doesn't block using :HdevToolsType
let g:hdevtools_options = '-g-fdefer-typed-holes -g-fdefer-type-errors -g-XPartialTypeSignatures'
let g:syntastic_haskell_hdevtools_args = g:hdevtools_options

" Don't complain about redundant parntheses in haskell files
let g:syntastic_haskell_hlint_args = '--ignore "Redundant bracket"'

" vim2hs use hasktags to auto generate tags files
let g:haskell_autotags = 1
let g:haskell_tags_generator = 'hasktags'

" Turn off concealing from vim2hs; background colour makes it ugly
let g:haskell_conceal = 0

" Allow syntax highlighting of multiline haskell strings
let g:haskell_multiline_strings = 1

" Configure Tagbar to use hasktags
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }
